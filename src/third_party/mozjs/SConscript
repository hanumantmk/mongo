# -*- mode: python -*-

Import("env")

env = env.Clone()
env.InjectThirdPartyIncludePaths(libraries=['zlib'])

def removeIfPresent(lst, item):
    try:
        lst.remove(item)
    except ValueError:
        pass

for to_remove in ['-Werror', '-Wall', '-W']:
    removeIfPresent(env['CCFLAGS'], to_remove)

# See what -D's show up in make.  The AB_CD one might change, but we're little
# endian only for now so I think it's sane
env.Prepend(CPPDEFINES=[
        'IMPL_MFBT',
        'AB_CD',
        'NO_NSPR_10_SUPPORT',
        'JS_USE_CUSTOM_ALLOCATOR',
        'U_NO_DEFAULT_INCLUDE_UTF_HEADERS=1',
        ])

# js-confdefs.h has to get in front on windows or wherever
if env.TargetOSIs('windows'):
    env.Prepend(CCFLAGS=[
            '/FI', 'js-confdefs.h'
            ])
else:
    env.Prepend(CCFLAGS=[
            '-include', 'js-confdefs.h',
            '-Wno-non-virtual-dtor',
            '-Wno-invalid-offsetof',
            ])

# js/src, js/public and mfbt are the only required sources right now, that
# could change in the future
#
# Also:
# We pre-generate configs for platforms and just check them in.  Running
# mozilla's config requires a relatively huge portion of their tree.
env.Prepend(CPPPATH=[
    '#src',
    '$BUILD_DIR',
    'extract/js/src',
    'extract/mfbt',
    'extract/intl/icu/source/common',
    'include',
    'jscustomallocator',
    'platform/' + env["TARGET_ARCH"] + "/" + env["TARGET_OS"] + "/build",
    'platform/' + env["TARGET_ARCH"] + "/" + env["TARGET_OS"] + "/include",
])

sources = [
    "extract/js/src/builtin/RegExp.cpp",
    "extract/js/src/frontend/Parser.cpp",
    "extract/js/src/jit/ExecutableAllocatorPosix.cpp",
    "extract/js/src/jsarray.cpp",
    "extract/js/src/jsatom.cpp",
    "extract/js/src/jsmath.cpp",
    "extract/js/src/jsutil.cpp",
    "extract/js/src/mfbt/Unified_cpp_mfbt0.cpp",
    "extract/js/src/vm/TraceLogging.cpp",
    "extract/js/src/vm/TraceLoggingGraph.cpp",
    "extract/js/src/vm/TraceLoggingTypes.cpp",
    "extract/mfbt/Compression.cpp",
    "extract/mfbt/decimal/Decimal.cpp",
]

if env.TargetOSIs("linux"):
    sources.append("extract/js/src/perf/pm_linux.cpp")
else:
    sources.append("extract/js/src/perf/pm_stub.cpp")

sources.extend(Glob('platform/' + env["TARGET_ARCH"] + "/" + env["TARGET_OS"] + "/build/*.cpp")),

# All of those unified sources come in from configure.  The files don't
# actually build individually anymore.
env.Library( "mozjs", sources )
